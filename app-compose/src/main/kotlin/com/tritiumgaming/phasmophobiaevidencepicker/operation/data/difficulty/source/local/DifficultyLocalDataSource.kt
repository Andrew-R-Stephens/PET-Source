package com.tritiumgaming.phasmophobiaevidencepicker.operation.data.difficulty.source.local

import android.content.Context
import androidx.annotation.IntegerRes
import com.tritiumgaming.phasmophobiaevidencepicker.R
import com.tritiumgaming.phasmophobiaevidencepicker.operation.data.difficulty.dto.DifficultyModelDto
import com.tritiumgaming.phasmophobiaevidencepicker.operation.data.difficulty.source.DifficultyDataSource
import com.tritiumgaming.phasmophobiaevidencepicker.operation.domain.difficulty.mapper.DifficultyResources.DifficultyResponseType
import com.tritiumgaming.phasmophobiaevidencepicker.operation.domain.difficulty.mapper.DifficultyResources.DifficultyTitle
import com.tritiumgaming.phasmophobiaevidencepicker.operation.domain.difficulty.mapper.DifficultyResources.Frequency

class DifficultyLocalDataSource(
    private val applicationContext: Context
): DifficultyDataSource {

    private val difficultyResourceDto
        get() = listOf(
            DifficultyResourceDto(
                index = 0,
                name = DifficultyTitle.AMATEUR,
                payoutCashRewardMultiplier = 1,
                payoutExperienceRewardMultiplier = 1,
                payoutInsurancePercent = .5f,
                playerSanityDrainModifier = R.fraction.difficulty_modifier_amateur,
                playerInitialSanity = R.fraction.difficulty_initialSanity_amateur,
                playerMedicationRestorationAmount = 40,
                playerRequiredLevel = 0,
                ghostResponseType = DifficultyResponseType.KNOWN,
                ghostFrequencyRoam = Frequency.MEDIUM,
                ghostFrequencyRoomSwap = Frequency.NONE,
                ghostFrequencyActivity = Frequency.HIGH,
                ghostFrequencyEvents = Frequency.LOW,
                ghostHuntDuration = Frequency.LOW,
                ghostHuntExtendedByKills = Frequency.NONE,
                ghostHuntGracePeriod = 5000,
                ghostFingerprintDuration = 120000,
                contractSetupTime = R.integer.difficulty_time_amateur,
                contractDoorsStartOpen = Frequency.NONE,
                contractHidingPlacesCount = Frequency.VERY_HIGH,
                contractSanityMonitorAvailability = true,
                contractFuseBoxStartsEnabled = true,
                contractFuseBoxVisible = true,
                contractCursedPossessionCount = 1,
            ),
            DifficultyResourceDto(
                index = 1,
                name = DifficultyTitle.INTERMEDIATE,
                payoutCashRewardMultiplier = 2,
                payoutExperienceRewardMultiplier = 2,
                payoutInsurancePercent = .25f,
                playerSanityDrainModifier = R.fraction.difficulty_modifier_intermediate,
                playerInitialSanity = R.fraction.difficulty_initialSanity_intermediate,
                playerMedicationRestorationAmount = 35,
                playerRequiredLevel = 10,
                ghostResponseType = DifficultyResponseType.KNOWN,
                ghostFrequencyRoam = Frequency.MEDIUM,
                ghostFrequencyRoomSwap = Frequency.NONE,
                ghostFrequencyActivity = Frequency.MEDIUM,
                ghostFrequencyEvents = Frequency.MEDIUM,
                ghostHuntDuration = Frequency.MEDIUM,
                ghostHuntExtendedByKills = Frequency.NONE,
                ghostHuntGracePeriod = 4000,
                ghostFingerprintDuration = 120000,
                contractSetupTime = R.integer.difficulty_time_intermediate,
                contractDoorsStartOpen = Frequency.LOW,
                contractHidingPlacesCount = Frequency.HIGH,
                contractSanityMonitorAvailability = true,
                contractFuseBoxStartsEnabled = false,
                contractFuseBoxVisible = true,
                contractCursedPossessionCount = 1
            ),
            DifficultyResourceDto(
                index = 2,
                name = DifficultyTitle.PROFESSIONAL,
                payoutCashRewardMultiplier = 3,
                payoutExperienceRewardMultiplier = 3,
                payoutInsurancePercent = 0f,
                playerSanityDrainModifier = R.fraction.difficulty_modifier_professional,
                playerInitialSanity = R.fraction.difficulty_initialSanity_professional,
                playerMedicationRestorationAmount = 30,
                playerRequiredLevel = 20,
                ghostResponseType = DifficultyResponseType.UNKNOWN,
                ghostFrequencyRoam = Frequency.HIGH,
                ghostFrequencyRoomSwap = Frequency.LOW,
                ghostFrequencyActivity = Frequency.LOW,
                ghostFrequencyEvents = Frequency.MEDIUM,
                ghostHuntDuration = Frequency.HIGH,
                ghostHuntExtendedByKills = Frequency.NONE,
                ghostHuntGracePeriod = 3000,
                ghostFingerprintDuration = 120000,
                contractSetupTime = R.integer.difficulty_time_professional,
                contractDoorsStartOpen = Frequency.MEDIUM,
                contractHidingPlacesCount = Frequency.MEDIUM,
                contractSanityMonitorAvailability = true,
                contractFuseBoxStartsEnabled = false,
                contractFuseBoxVisible = true,
                contractCursedPossessionCount = 1,
            ),
            DifficultyResourceDto(
                index = 3,
                name = DifficultyTitle.NIGHTMARE,
                payoutCashRewardMultiplier = 4,
                payoutExperienceRewardMultiplier = 4,
                payoutInsurancePercent = 0f,
                playerSanityDrainModifier = R.fraction.difficulty_modifier_nightmare,
                playerInitialSanity = R.fraction.difficulty_initialSanity_nightmare,
                playerMedicationRestorationAmount = 25,
                playerRequiredLevel = 30,
                ghostResponseType = DifficultyResponseType.UNKNOWN,
                ghostFrequencyRoam = Frequency.HIGH,
                ghostFrequencyRoomSwap = Frequency.MEDIUM,
                ghostFrequencyActivity = Frequency.LOW,
                ghostFrequencyEvents = Frequency.HIGH,
                ghostHuntDuration = Frequency.HIGH,
                ghostHuntExtendedByKills = Frequency.LOW,
                ghostHuntGracePeriod = 2000,
                ghostFingerprintDuration = 120000,
                contractSetupTime = R.integer.difficulty_time_nightmare,
                contractDoorsStartOpen = Frequency.HIGH,
                contractHidingPlacesCount = Frequency.LOW,
                contractSanityMonitorAvailability = false,
                contractFuseBoxStartsEnabled = false,
                contractFuseBoxVisible = false,
                contractCursedPossessionCount = 1,
            ),
            DifficultyResourceDto(
                index = 4,
                name = DifficultyTitle.INSANITY,
                payoutCashRewardMultiplier = 6,
                payoutExperienceRewardMultiplier = 6,
                payoutInsurancePercent = 0f,
                playerSanityDrainModifier = R.fraction.difficulty_modifier_insanity,
                playerInitialSanity = R.fraction.difficulty_initialSanity_insanity,
                playerMedicationRestorationAmount = 20,
                playerRequiredLevel = 40,
                ghostResponseType = DifficultyResponseType.UNKNOWN,
                ghostFrequencyRoam = Frequency.HIGH,
                ghostFrequencyRoomSwap = Frequency.HIGH,
                ghostFrequencyActivity = Frequency.LOW,
                ghostFrequencyEvents = Frequency.HIGH,
                ghostHuntDuration = Frequency.HIGH,
                ghostHuntExtendedByKills = Frequency.LOW,
                ghostHuntGracePeriod = 2000,
                ghostFingerprintDuration = 60000,
                contractSetupTime = R.integer.difficulty_time_insanity,
                contractDoorsStartOpen = Frequency.HIGH,
                contractHidingPlacesCount = Frequency.LOW,
                contractSanityMonitorAvailability = false,
                contractFuseBoxStartsEnabled = false,
                contractFuseBoxVisible = false,
                contractCursedPossessionCount = 0,
            ),
        )

    override fun fetchDifficulties(): Result<List<DifficultyModelDto>> =
        Result.success(difficultyResourceDto.toDifficultyModelDto())

    private fun List<DifficultyResourceDto>.toDifficultyModelDto() = map{ it.toDifficultyModelDto() }

    private fun DifficultyResourceDto.toDifficultyModelDto() = DifficultyModelDto(
        index = index,
        name = name,
        time = applicationContext.resources.getInteger(contractSetupTime).toLong(),
        modifier = applicationContext.resources.getFraction(playerSanityDrainModifier, 1, 1)
            .toFloat(),
        initialSanity = applicationContext.resources.getFraction(playerInitialSanity, 1, 1)
            .toFloat(),
        responseType = ghostResponseType,
        playerMedicationRestorationAmount = playerMedicationRestorationAmount,
        playerRequiredLevel = playerRequiredLevel,
        payoutCashRewardMultiplier = payoutCashRewardMultiplier,
        payoutExperienceRewardMultiplier = payoutExperienceRewardMultiplier,
        payoutInsurancePercent = payoutInsurancePercent,
        ghostFrequencyRoam = ghostFrequencyRoam,
        ghostFrequencyRoomSwap = ghostFrequencyRoomSwap,
        ghostFrequencyActivity = ghostFrequencyActivity,
        ghostFrequencyEvents = ghostFrequencyEvents,
        ghostHuntDuration = ghostHuntDuration,
        ghostHuntExtendedByKills = ghostHuntExtendedByKills,
        ghostHuntGracePeriod = ghostHuntGracePeriod,
        ghostFingerprintDuration = ghostFingerprintDuration,
        contractDoorsStartOpen = contractDoorsStartOpen,
        contractHidingPlacesCount = contractHidingPlacesCount,
        contractSanityMonitorAvailability = contractSanityMonitorAvailability,
        contractFuseBoxStartsEnabled = contractFuseBoxStartsEnabled,
        contractFuseBoxVisible = contractFuseBoxVisible,
        contractCursedPossessionCount = contractCursedPossessionCount,
    )

    private data class DifficultyResourceDto(
        val index: Int,
        val name: DifficultyTitle,
        @IntegerRes val contractSetupTime: Int,
        @IntegerRes val playerSanityDrainModifier: Int,
        @IntegerRes val playerInitialSanity: Int,
        val playerMedicationRestorationAmount: Int,
        val playerRequiredLevel: Int,
        val payoutCashRewardMultiplier: Int,
        val payoutExperienceRewardMultiplier: Int,
        val payoutInsurancePercent: Float,
        val ghostResponseType: DifficultyResponseType,
        val ghostFrequencyRoam: Frequency,
        val ghostFrequencyRoomSwap: Frequency,
        val ghostFrequencyActivity: Frequency,
        val ghostFrequencyEvents: Frequency,
        val ghostHuntDuration: Frequency,
        val ghostHuntExtendedByKills: Frequency,
        val ghostHuntGracePeriod: Long,
        val ghostFingerprintDuration: Long,
        val contractDoorsStartOpen: Frequency,
        val contractHidingPlacesCount: Frequency,
        val contractSanityMonitorAvailability: Boolean,
        val contractFuseBoxStartsEnabled: Boolean,
        val contractFuseBoxVisible: Boolean,
        val contractCursedPossessionCount: Int
    )

}
